KISS stands for:
Keep It Simple, Stupid
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
It‚Äôs a software design principle that encourages simplicity in design and coding. The idea is:
‚ÄúMost systems work best if they are kept simple rather than made complex. Therefore, simplicity should be a key goal in design.‚Äù
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
üî∏ Why is KISS Important in Java?
Java is a verbose, strongly typed, object-oriented language. It‚Äôs easy to overcomplicate things with unnecessary abstraction, interfaces, classes, or inheritance. KISS helps you avoid that.

KISS helps in
Faster development
Easier debugging
Better readability
Lower maintenance cost
Easier testing
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
üî∏ How to Apply KISS in Java
Let‚Äôs go step-by-step and compare complex vs. simple examples.
‚úÖ 1. Avoid Over-Engineering

‚ùå Bad (Violates KISS):
interface Operation {
    int perform(int a, int b);
}

class Addition implements Operation {
    public int perform(int a, int b) {
        return a + b;
    }
}

public class Calculator {
    public static void main(String[] args) {
        Operation op = new Addition();
        System.out.println(op.perform(2, 3));
    }
}

‚úÖ Good (KISS):
public class Calculator {
    public static void main(String[] args) {
        int result = 2 + 3;
        System.out.println(result);
    }
}
Unless you need a strategy pattern, don't introduce it. Keep it simple.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
‚úÖ 2. Use Clear, Direct Code
‚ùå Bad (Too clever):

public class Main {
    public static void main(String[] args) {
        System.out.println(((5 + 3) << 1) / 2);
    }
}

‚úÖ Good (Readable):
public class Main {
    public static void main(String[] args) {
        int sum = 5 + 3;
        int result = sum;
        System.out.println(result);
    }
}

Avoid clever tricks or bitwise ops unless necessary.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
‚úÖ 3. Avoid Unnecessary Abstraction
‚ùå Bad (Overuse of design patterns):

public class ShapeFactory {
    public static Shape getShape(String type) {
        if ("circle".equals(type)) return new Circle();
        else if ("square".equals(type)) return new Square();
        else return null;
    }
}

‚úÖ Good (Simple direct object creation):
Circle c = new Circle();
Use factories or patterns only when there's a clear benefit.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
‚úÖ 4. Don‚Äôt Optimize Prematurely
‚ùå Bad:
int result = (int)Math.pow(x, 2); // When x is small and known

‚úÖ Good:
int result = x * x;
Premature optimization is a common anti-pattern. KISS means: optimize when needed.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

