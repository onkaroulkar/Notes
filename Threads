🧵 Java Threads: From Basics to Advanced
Java supports multithreading, which allows a program to execute multiple parts (threads) simultaneously. This is especially useful for performance, concurrency, and asynchronous tasks.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 1. What is a Thread?
A thread is a lightweight subprocess, the smallest unit of processing. Java uses java.lang.Thread class to represent threads.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 2. Creating Threads in Java
There are 2 primary ways to create a thread:

✅ Method 1: Extend the Thread class
class MyThread extends Thread {
    public void run() {
        System.out.println("Thread running: " + Thread.currentThread().getName());
    }
}

public class Main {
    public static void main(String[] args) {
        MyThread t1 = new MyThread();
        t1.start(); // start a new thread
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
✅ Method 2: Implement the Runnable interface
class MyRunnable implements Runnable {
    public void run() {
        System.out.println("Runnable running: " + Thread.currentThread().getName());
    }
}

public class Main {
    public static void main(String[] args) {
        Thread t1 = new Thread(new MyRunnable());
        t1.start(); // starts a new thread
    }
}

🔸 run() is what the thread will execute.
🔸 start() begins the new thread; run() just runs on the current thread.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 3. Thread Lifecycle
A thread goes through the following states:
New – Thread created but not started
Runnable – Ready to run but waiting for CPU
Running – Currently executing
Blocked/Waiting – Waiting for resources or signal
Terminated – Finished execution
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 4. Thread Methods

| Method             | Description                  |
| ------------------ | ---------------------------- |
| `start()`          | Starts the thread            |
| `run()`            | Code inside thread           |
| `sleep(ms)`        | Sleeps the thread            |
| `join()`           | Waits for a thread to finish |
| `isAlive()`        | Checks if thread is alive    |
| `setPriority(int)` | Set thread priority          |
| `interrupt()`      | Interrupts the thread        |
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Example: Sleep and Join

class MyThread extends Thread {
    public void run() {
        try {
            Thread.sleep(1000); // Sleep for 1 second
            System.out.println("Thread done sleeping");
        } catch (InterruptedException e) {
            System.out.println("Thread interrupted");
        }
    }
}

public class Main {
    public static void main(String[] args) throws InterruptedException {
        MyThread t1 = new MyThread();
        t1.start();

        t1.join(); // Wait for t1 to finish
        System.out.println("Main thread finished after t1");
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
join method:

In Java, the join() method is a part of the Thread class, and it is used to pause the execution of the current thread until the thread on which join() was called finishes execution.
Syntax:
thread.join(); // waits indefinitely until the thread completes
thread.join(milliseconds); // waits for a specified time at most

Why use join()?
Suppose you have multiple threads running, and you want to wait for one of them to finish before continuing. You use join() for that.

Example:
class MyThread extends Thread {
    public void run() {
        for(int i = 1; i <= 5; i++) {
            System.out.println(Thread.currentThread().getName() + ": " + i);
            try {
                Thread.sleep(500);
            } catch (InterruptedException e) {
                System.out.println("Interrupted");
            }
        }
    }
}

public class JoinExample {
    public static void main(String[] args) {
        MyThread t1 = new MyThread();
        MyThread t2 = new MyThread();

        t1.start();
        try {
            t1.join(); // Wait for t1 to finish before starting t2
        } catch (InterruptedException e) {
            System.out.println("Main thread interrupted");
        }

        t2.start();
    }
}

Output behavior:
t1 starts and finishes.
Only after t1 completes does t2 begin.

Variants:
join() – waits until the thread is dead.
join(long millis) – waits up to millis milliseconds.
join(long millis, int nanos) – waits up to the specified time with nanosecond precision.

Notes:
If the thread you're joining is already finished, join() returns immediately.
It can throw InterruptedException, so it must be handled or declared.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 5. Thread Synchronization
When multiple threads access shared resources (e.g., variables), data inconsistency can happen. Use synchronized keyword to ensure only one thread accesses the resource at a time.

Example: Without Synchronization (Race Condition)
class Counter {
    int count = 0;

    void increment() {
        count++;
    }
}

public class Main {
    public static void main(String[] args) throws InterruptedException {
        Counter c = new Counter();

        Thread t1 = new Thread(() -> {
            for (int i = 0; i < 10000; i++) c.increment();
        });
        Thread t2 = new Thread(() -> {
            for (int i = 0; i < 10000; i++) c.increment();
        });

        t1.start();
        t2.start();
        t1.join();
        t2.join();

        System.out.println("Final count: " + c.count); // Likely less than 20000
    }
}

✅ Fixing it with synchronized
class Counter {
    int count = 0;

    synchronized void increment() {
        count++;
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔧 Basics of Threads and Shared Resources
imagine two threads working with a shared object (like a message queue or buffer). To avoid conflicts and ensure correct sequencing, they need to communicate and coordinate. That’s where wait() and notify() come into play.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🧠 Concept Overview
Causes the current thread to wait until another thread notifies it.
It releases the lock (monitor) on the object.
Must be called from a synchronized context.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
✅ notify()
Wakes up one thread that is waiting on the object’s monitor.
The awakened thread must re-acquire the lock before it can continue.
Also must be called from a synchronized context.

✅ notifyAll()
Wakes up all threads that are waiting on the object’s monitor.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🧩 Key Points

| Feature                   | `wait()`               | `notify()` | `notifyAll()` |
| ------------------------- | ---------------------- | ---------- | ------------- |
| From Class                | Object                 | Object     | Object        |
| Synchronization Required? | ✅ Yes                 | ✅ Yes    | ✅ Yes       |
| Releases Lock?            | ✅ Yes                 | ❌ No     | ❌ No        |
| Wakes Threads?            | ❌ No                  | ✅ One    | ✅ All       |
| Throws Exception          | `InterruptedException` 
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

class Shared {
    synchronized void printEven() throws InterruptedException {
        System.out.println("Waiting...");
        wait(); // waits for notify
        System.out.println("Even Printed!");
    }

    synchronized void printOdd() {
        System.out.println("Odd Printed!");
        notify(); // resumes waiting thread
    }
}

public class Main {
    public static void main(String[] args) {
        Shared shared = new Shared();

        Thread t1 = new Thread(() -> {
            try {
                shared.printEven();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        Thread t2 = new Thread(() -> shared.printOdd());

        t1.start();
        try { Thread.sleep(1000); } catch (Exception e) {}
        t2.start();
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 What is a Thread Pool?
A thread pool is a collection of pre-instantiated, reusable threads that are managed by a system or framework. Instead of creating and destroying threads for every task, a thread pool maintains a pool of worker threads that can be reused for multiple tasks.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 Why Use a Thread Pool?
Creating a new thread is a costly operation in terms of time and system resources. If your application spawns many threads (e.g., for handling thousands of client requests), this can lead to:

High memory usage
Thread contention
CPU context switching overhead

Thread pools help solve this by:
Limiting the number of concurrent threads
Reusing threads for multiple tasks
Reducing latency due to thread creation/destruction
Improving system stability and performance
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 Key Concepts

| Term                  | Description                                                           |
| --------------------- | --------------------------------------------------------------------- |
| **Worker Thread**     | A thread in the pool that executes tasks.                             |
| **Task/Job**          | A unit of work submitted to the thread pool.                          |
| **Task Queue**        | A queue that holds submitted tasks until a worker thread is free.     |
| **Core Pool Size**    | Minimum number of threads kept alive in the pool, even if idle.       |
| **Maximum Pool Size** | Maximum number of threads allowed in the pool.                        |
| **Thread Factory**    | Used to create new threads when needed.                               |
| **Rejection Policy**  | What to do if the task queue is full and the pool is at its max size. |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 How Thread Pool Works

A task is submitted to the thread pool.
If a thread is idle, it picks up the task.
If all threads are busy and the task queue has space, the task is queued.
If the queue is full and pool has not reached maximum size, a new thread is created.
If the pool is at max size and queue is full, the task is rejected or handled based on the rejection policy
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 Thread Pool in Java (Example)

Java provides a thread pool implementation via the ExecutorService framework.

ExecutorService executor = Executors.newFixedThreadPool(4);

for (int i = 0; i < 10; i++) {
    executor.submit(() -> {
        System.out.println("Task executed by: " + Thread.currentThread().getName());
    });
}

executor.shutdown();


In this example:

A thread pool with 4 threads is created.
10 tasks are submitted.
Only 4 threads are used to execute them (others wait in the queue).
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 Thread Pool Types

| Type                     | Description                                                               |
| ------------------------ | ------------------------------------------------------------------------- |
| **FixedThreadPool**      | Fixed number of threads; suitable for a known number of concurrent tasks. |
| **CachedThreadPool**     | Creates new threads as needed, reuses idle threads. Can grow infinitely.  |
| **SingleThreadExecutor** | A single worker thread; tasks are executed sequentially.                  |
| **ScheduledThreadPool**  | Supports task scheduling (e.g., run after delay or periodically).         |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 Thread Pool Best Practices

Avoid unbounded pools (like newCachedThreadPool) unless you manage task load carefully.
Use bounded queues to prevent memory exhaustion.
Always shutdown the pool when done.
Tune the pool size based on available CPUs and task nature (CPU-bound vs I/O-bound).
Monitor thread pool metrics (active threads, queue size, etc.).
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 Real-World Use Cases

Web servers handling HTTP requests
Background task processing
Parallelizing independent computations
Asynchronous event handling systems
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
The Fork/Join Framework in Java is a framework introduced in Java 7 to take advantage of multiple processors (parallelism). It is part of the java.util.concurrent package and is designed to recursively break down tasks into smaller subtasks, process them in parallel, and then combine (or join) the results.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
📌 Why Use the Fork/Join Framework?
It’s ideal for divide-and-conquer algorithms, where:

A big task can be split into smaller tasks.

These smaller tasks are processed concurrently.

The results of subtasks are combined to form the final result.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔧 Core Components
1. ForkJoinPool
A specialized thread pool designed for the framework.

Manages a set of worker threads and handles task scheduling efficiently using work stealing.

2. ForkJoinTask<V>
The base class for tasks submitted to a ForkJoinPool.

Two main subclasses:

RecursiveTask<V> – returns a result.

RecursiveAction – does not return a result (i.e., void).
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
📘 Basic Flow
Define a task by extending RecursiveTask (or RecursiveAction).

Inside compute(), check if the task is small enough to compute directly.

If not, split it into smaller subtasks (fork() them).

Wait for results using join().

Combine and return the result.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🧪 Example: Sum of an Array (RecursiveTask)

import java.util.concurrent.*;

public class ArraySum extends RecursiveTask<Long> {
    private static final int THRESHOLD = 500;
    private final long[] array;
    private final int start, end;

    public ArraySum(long[] array, int start, int end) {
        this.array = array;
        this.start = start;
        this.end = end;
    }

    @Override
    protected Long compute() {
        if (end - start <= THRESHOLD) {
            long sum = 0;
            for (int i = start; i < end; i++) sum += array[i];
            return sum;
        } else {
            int mid = (start + end) / 2;
            ArraySum left = new ArraySum(array, start, mid);
            ArraySum right = new ArraySum(array, mid, end);
            left.fork();                        // async execution
            long rightResult = right.compute(); // sync execution
            long leftResult = left.join();     // wait for left
            return leftResult + rightResult;
        }
    }

    public static void main(String[] args) {
        long[] array = new long[10000];
        for (int i = 0; i < array.length; i++) array[i] = i;
        
        ForkJoinPool pool = new ForkJoinPool();
        ArraySum task = new ArraySum(array, 0, array.length);
        long result = pool.invoke(task);
        System.out.println("Sum = " + result);
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
✅ Key Concepts
fork() – schedules a subtask for asynchronous execution.

join() – waits for the subtask to finish and returns the result.

invoke() – starts a task and waits for its completion.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

🚀 Advantages
Efficient parallel execution for recursive tasks.

Uses work-stealing algorithm (idle threads "steal" tasks from busy ones).

Better than ExecutorService for tasks with recursive decomposition.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

❗ When not to use
For I/O-bound tasks (it's CPU-optimized).

When tasks are not easily divisible or parallelizable.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
A daemon thread is a background thread that runs continuously in the background but does not block the program from exiting. When all non-daemon (main) threads are done, the program will terminate, even if daemon threads are still running.

Daemon threads are typically used for tasks like:

Logging
Monitoring
Background I/O
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔸 Key Properties

Default: Threads are non-daemon by default.
A thread becomes a daemon by setting .daemon = True before calling .start().
Daemon threads are killed automatically when the main program exits.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 Simple Example: Without Daemon

public class SimpleDaemonExample {
    public static void main(String[] args) {
        Thread daemonThread = new Thread(() -> {
            while (true) {
                System.out.println("Daemon thread running...");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    System.out.println("Daemon interrupted");
                }
            }
        });

        daemonThread.setDaemon(true); // Must be called before start()
        daemonThread.start();

        System.out.println("Main thread finished.");
    }
}

🧠 Output:
Daemon thread running...
Daemon thread running...
Main thread finished.

👉 The daemon thread is killed automatically when the main thread exits.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔸 2. Without Daemon (Default Thread)
public class NonDaemonExample {
    public static void main(String[] args) {
        Thread userThread = new Thread(() -> {
            try {

                Thread.sleep(5000);
                System.out.println("User thread done.");
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        userThread.start();

        System.out.println("Main thread done.");
    }
}

✅ Output:
Main thread done.
User thread done.
👉 The JVM waits for the user thread to finish.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔸 3. Mid-Level Example: Background Logger

public class LoggerDaemon {
    public static void main(String[] args) {
        Thread logger = new Thread(() -> {
            while (true) {
                System.out.println("[Logger] Writing logs...");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    break;
                }
            }
        });

        logger.setDaemon(true);
        logger.start();

        // Simulate main program
        for (int i = 0; i < 3; i++) {
            System.out.println("Main task " + i);
            try {
                Thread.sleep(1500);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        System.out.println("Main program done.");
    }
}

🧠 Output:
[Logger] Writing logs...
Main task 0
[Logger] Writing logs...
Main task 1
[Logger] Writing logs...
Main task 2
Main program done.


✅ Once the main thread exits, the daemon thread is terminated.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔸 4. Advanced Example: Server Monitor + Request Handler
public class ServerExample {
    public static void main(String[] args) {
        // Background daemon thread for monitoring
        Thread monitor = new Thread(() -> {
            while (true) {
                System.out.println("[Monitor] Checking system status...");
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    break;
                }
            }
        });
        monitor.setDaemon(true);
        monitor.start();

        // Foreground thread simulating a request
        Thread requestHandler = new Thread(() -> {
            System.out.println("[RequestHandler] Handling request...");
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("[RequestHandler] Request completed.");
        });

        requestHandler.start();

        try {
            requestHandler.join(); // Wait for request to complete
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        System.out.println("Main program exiting...");
    }
}

🧠 Output:
[Monitor] Checking system status...
[RequestHandler] Handling request...
[Monitor] Checking system status...
...
[RequestHandler] Request completed.
Main program exiting...

✅ Daemon (monitor) runs in the background, but is stopped automatically after main and user threads finish.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⚠️ Important Notes
setDaemon(true) must be called before start(), otherwise you'll get IllegalThreadStateException.

JVM exits only when all non-daemon threads have completed.

Use daemon threads only when tasks don’t require guaranteed completion (e.g., logging, cleaning).
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



