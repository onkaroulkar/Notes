🔹 What is Garbage Collection in Java?

Garbage Collection is the process by which Java automatically manages memory by identifying and disposing of objects that are no longer needed (i.e., not referenced).
Java provides automatic garbage collection via the JVM (Java Virtual Machine) — freeing the programmer from manually deallocating memory.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 Why is Garbage Collection Needed

Memory Management: Prevent memory leaks and manage heap space efficiently.
Avoid Crashes: Reclaim memory from unused objects to avoid OutOfMemoryError.
Developer Productivity: No need to manually free memory (unlike C/C++ with free() or delete).
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 How Does Garbage Collection Work?

Heap Memory Structure:
Java heap is divided into:
┌───────────────────────────────┐
│          Young Generation     │
│  ┌────────┬────────┬───────┐  │
│  │ Eden   │ S0     │ S1    │  │
│  └────────┴────────┴───────┘  │
│         Old Generation        │
└───────────────────────────────┘

Explanation:

Young Generation: Where new objects are allocated.
Eden Space: All new objects start here
Survivor Spaces (S0, S1): Objects that survive GC in Eden are moved here.
Old Generation (Tenured): Long-lived objects are moved here.
PermGen/Metaspace: Class metadata (PermGen till Java 7, replaced by Metaspace in Java 8+).
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 Types of Garbage Collectors
Java provides multiple GC implementations:

| GC Type                         | Description                                                    |
| ------------------------------- | -------------------------------------------------------------- |
| **Serial GC**                   | Simple, single-threaded. Good for small apps.                  |
| **Parallel GC**                 | Multi-threaded GC for high throughput.                         |
| **CMS (Concurrent Mark Sweep)** | Minimizes pause time. Deprecated since Java 9.                 |
| **G1 GC (Garbage First)**       | Balances throughput and low latency. Default since Java 9.     |
| **ZGC / Shenandoah**            | Ultra-low pause, scalable. Java 11+ and Java 12+ respectively. |

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 How Objects Become Garbage
An object becomes eligible for garbage collection when no live thread can access it.

public class SimpleGC {
    public static void main(String[] args) {
        String s = new String("Hello");
        s = null;  // Now "Hello" is unreferenced and can be collected
        System.gc(); // Request GC (not guaranteed)
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
✅ Example: Nullifying Reference

public class GCExample {
    public static void main(String[] args) {
        GCExample obj = new GCExample();
        obj = null;  // Eligible for GC
        System.gc(); // Requests GC
    }

    @Override
    protected void finalize() {
        System.out.println("GC collected this object");
    }
}
Note: finalize() is deprecated in Java 9+. Use Cleaner or try-with-resources instead.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 Mark and Sweep Algorithm (GC Internals)
Mark phase: GC identifies all reachable (live) objects.

Sweep phase: GC deletes unmarked (unreachable) objects and frees memory.

More advanced collectors (e.g., G1, ZGC) use sophisticated techniques like region-based collection, concurrent marking, and compaction.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 Advanced Example: Object Graphs
class Node {
    Node next;
}

public class GraphGC {
    public static void main(String[] args) {
        Node a = new Node();
        Node b = new Node();
        a.next = b;
        b.next = a; // Circular reference

        a = null;
        b = null;

        System.gc(); // Both a and b are unreachable, GC will collect them
    }
}

Even though a and b reference each other, they are not reachable from root threads and hence eligible for GC.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 When GC Doesn’t Happen
If the object is still reachable.

If there's enough heap space and no GC threshold is hit.

System.gc() is a suggestion, not a command — JVM may ignore it.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔹 Summary Cheat Sheet
| Term              | Meaning                           |
| ----------------- | --------------------------------- |
| **Heap**          | Memory where objects are stored.  |
| **GC**            | Automatic memory cleanup.         |
| **Young Gen**     | For short-lived objects.          |
| **Old Gen**       | For long-lived objects.           |
| **Mark & Sweep**  | Basic GC algorithm.               |
| **WeakReference** | GC collects if no strong refs.    |
| **G1 GC**         | Default collector in modern JVMs. |

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
