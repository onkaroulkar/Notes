üîπ What is a SQL JOIN?
A JOIN clause is used to combine rows from two or more tables, based on a related column between them.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
üß± Sample Tables
We'll use the following two simple tables for examples:

employees

| emp_id  | name    | dept_id  |
| ------- | ------- | -------- |
| 1       | Alice   | 10       |
| 2       | Bob     | 20       |
| 3       | Charlie | NULL     |
| 4       | Diana   | 30       |

departments
| dept_id  | dept_name  |
| -------- | ---------- |
| 10       | HR         |
| 20       | IT         |
| 30       | Marketing  |
| 40       | Finance    |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
üî∏ 1. INNER JOIN
üëâ Returns only matching rows between both tables.

Diagram:
employees
    +---------+          INNER JOIN          +-----------+
    | dept_id | --------------------------> | dept_id   |
    +---------+                             +-----------+
                                           Match only

SQL:
SELECT e.name, d.dept_name
FROM employees e
INNER JOIN deparments d
ON e.emp_id = d.dept_id;

Result:
| name  | dept_name  |
| ----- | ---------- |
| Alice | HR         |
| Bob   | IT         |
| Diana | Marketing  |

üôÖ Charlie is excluded because his dept_id is NULL.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
üî∏ 2. LEFT JOIN (or LEFT OUTER JOIN)
üëâ Returns all rows from the left table, with matching rows from the right table. If no match, NULL.

Diagram:

LEFT TABLE              RIGHT TABLE
  employees           departments
    +---------+           +-----------+
    | dept_id | --------> | dept_id   |
    +---------+           +-----------+
   ALL rows retained

SQL:
SELECT e.name, d.dept_name
FROM employees e
LEFT JOIN delparments d
ON e.dept_id = d.dept_id;

Result:
| name    | dept_name  |
| ------- | ---------- |
| Alice   | HR         |
| Bob     | IT         |
| Charlie | NULL       |
| Diana   | Marketing  |
üôå Includes Charlie, even though no department matches.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
üî∏ 3. RIGHT JOIN (or RIGHT OUTER JOIN)
üëâ Returns all rows from the right table, with matching rows from the left table. If no match, NULL.

Diagram:

LEFT TABLE              RIGHT TABLE
  employees           departments
    +---------+           +-----------+
    | dept_id | --------> | dept_id   |
    +---------+           +-----------+
                        ALL rows retained


SQL:
SELECT e.name, d.dept_name
FROM employees e
RIGHT JOIN deparments d
ON e.dept_id = d.dept_id;

Result:
| name  | dept_name  |
| ----- | ---------- |
| Alice | HR         |
| Bob   | IT         |
| Diana | Marketing  |
| NULL  | Finance    |

üè¶ Includes "Finance" department even though no employee is in it.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
üî∏ 4. FULL OUTER JOIN
üëâ Returns all rows from both tables. If there‚Äôs no match, NULL is used.

Diagram:
 LEFT TABLE         FULL OUTER JOIN        RIGHT TABLE
+-----------+    <------------------->   +------------+
| employees |                          | departments |
+-----------+                          +------------+
 ALL rows from both


SQL:
SELECT e.name, d.dept_name
FROM employees e
FULL OUTER JOIN departments d
ON e.dept_id = d.dept_id;

Result:
| name    | dept_name  |
| ------- | ---------- |
| Alice   | HR         |
| Bob     | IT         |
| Diana   | Marketing  |
| Charlie | NULL       |
| NULL    | Finance    |

üôå All rows are included whether matched or not.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
üî∏ 5. CROSS JOIN
üëâ Returns Cartesian product: every row from first table paired with every row from second table.

SQL:
SELECT e.name, d.dept_name
FROM employees e
CROSS JOIN departments d;

Result:
If 4 employees √ó 4 departments = 16 rows.

| name  | dept_name  |
| ----- | ---------- |
| Alice | HR         |
| Alice | IT         |
| Alice | Marketing  |
| Alice | Finance    |
| Bob   | HR         |
| ...   | ...        |

‚ö†Ô∏è Use with care ‚Äî can generate huge result sets.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
üî∏ 6. SELF JOIN
üëâ A table joined to itself. Useful for hierarchical data (e.g., manager and employee).

Example Table: employees
| emp_id  | name    | manager_id  |
| ------- | ------- | ----------- |
| 1       | Alice   | NULL        |
| 2       | Bob     | 1           |
| 3       | Charlie | 1           |
| 4       | Diana   | 2           |

SQL:
SELECT e.name AS employee, m.name AS manager
FROM employee e
LEFT JOIN employee m 
ON  e.manager_id = m.emp_id;

Result:
| emp_id  | name    | dept_id  |
| ------- | ------- | -------- |
| 1       | Alice   | 10       |
| 2       | Bob     | 20       |
| 3       | Charlie | NULL     |
| 4       | Diana   | 30       |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
üéØ Summary Table

| JOIN Type       | Returns                              |
| --------------- | ------------------------------------ |
| INNER JOIN      | Only matching rows                   |
| LEFT JOIN       | All from left + matching from right  |
| RIGHT JOIN      | All from right + matching from left  |
| FULL OUTER JOIN | All rows from both tables            |
| CROSS JOIN      | All combinations (Cartesian product) |
| SELF JOIN       | A table joined to itself             |

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
üß© 2. Advanced JOIN Examples (Multiple Tables)
Let‚Äôs use a new schema with 3 related tables:

üîπ Tables
orders
| order\_id | customer\_id | product\_id | order\_date |
| --------- | ------------ | ----------- | ----------- |
| 1         | 101          | 1001        | 2024-07-01  |
| 2         | 102          | 1002        | 2024-07-02  |
| 3         | 101          | 1003        | 2024-07-03  |

customers
| customer\_id | name  |
| ------------ | ----- |
| 101          | Alice |
| 102          | Bob   |

products
| product\_id | product\_name | price |
| ----------- | ------------- | ----- |
| 1001        | Laptop        | 1000  |
| 1002        | Mouse         | 50    |
| 1003        | Keyboard      | 80    |

‚úÖ Query: Get all orders with customer and product details
SELECT
  o.order_id,
  c.name AS customer_name,
  p.product_name,
  p.price,
  o.order_date
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN products p ON o.product_id = p.product_id;

Result:
| order\_id | customer\_name | product\_name | price | order\_date |
| --------- | -------------- | ------------- | ----- | ----------- |
| 1         | Alice          | Laptop        | 1000  | 2024-07-01  |
| 2         | Bob            | Mouse         | 50    | 2024-07-02  |
| 3         | Alice          | Keyboard      | 80    | 2024-07-03  |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
‚ö†Ô∏è Missing Products?
Let‚Äôs say one order has a product_id not found in products. Use a LEFT JOIN to include it:

SELECT
  o.order_id,
  c.name AS customer_name,
  p.product_name,
  p.price
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
LEFT JOIN products p ON o.product_id = p.product_id;
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
üìä 3. Real-World Use Case: Sales Summary
Let‚Äôs generate a total sales per customer report:

SELECT
  c.name AS customer_name,
  SUM(p.price) AS total_spent
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id
JOIN products p ON o.product_id = p.product_id
GROUP BY c.name;

Result:
| customer\_name | total\_spent |
| -------------- | ------------ |
| Alice          | 1080         |
| Bob            | 50           |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Filtering with WHERE

Get employees older than 30:
SELECT * FROM Employees WHERE Age > 30;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
orting with ORDER BY

Sort employees by Age ascending:
SELECT * FROM Employees ORDER BY Age ASC;

Sort descending:
SELECT * FROM Employees ORDER BY Age DESC;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Limiting rows

Get only top 2 rows:
SELECT * FROM Employees LIMIT 2;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Aggregate Functions and Grouping

Count number of employees
SELECT COUNT(*) FROM Employees;
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Average age

SELECT AVG(Age) FROM Employees;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Group by department and count employees

SELECT Department, COUNT(*) AS NumberOfEmployees
FROM Employees
GROUP BY Department;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Subqueries

Find employees older than average age:
SELECT * FROM Employees 
WHERE Age > (SELECT AVG(Age) FROM Employees);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
CASE statements (conditional logic)

Add a column ‚ÄúAgeGroup‚Äù:
SELECT Name, Age,
CASE 
  WHEN Age < 30 THEN 'Young'
  WHEN Age BETWEEN 30 AND 40 THEN 'Mid-age'
  ELSE 'Senior'
END AS AgeGroup
FROM Employees;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
What is HAVING?
WHERE filters rows before grouping.
HAVING filters groups after grouping.

SELECT Salesperson, SUM(Amount) AS TotalSales
FROM Sales
GROUP BY Salesperson
HAVING SUM(Amount) > 200;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Find the youngest employee‚Äôs age (minimum age):

SELECT MIN(Age) AS YoungestAge
FROM Employees;
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Find the highest salary:

SELECT MAX(Salary) AS HighestSalary
FROM Employees;
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

