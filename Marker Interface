‚úÖ Definition:
A marker interface is an interface that does not contain any methods or constants. It is used just to mark a class so that some functionality can be added to it dynamically.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
üß† Why Use Marker Interfaces?
Marker interfaces act like metadata. They let the compiler or JVM know that a class has a specific property. The actual behavior is usually handled by code that checks for the presence of the interface using instanceof or reflection.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
üîë Examples of Marker Interfaces in Java (Built-in):

java.io.Serializable
java.lang.Cloneable
java.util.RandomAccess
java.rmi.Remote
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
ü™ú Step-by-Step Examples: From Simple to Complex

‚úÖ Simple Example: Custom Marker Interface
// Marker Interface
interface PermissionGranted {
    // no methods
}

// A class marked with the marker interface
class Admin implements PermissionGranted {
    // admin-specific code
}

class Guest {
    // guest-specific code
}

public class MarkerTest {
    public static void main(String[] args) {
        checkPermission(new Admin());
        checkPermission(new Guest());
    }

    public static void checkPermission(Object obj) {
        if (obj instanceof PermissionGranted) {
            System.out.println(obj.getClass().getSimpleName() + ": Access Granted ‚úÖ");
        } else {
            System.out.println(obj.getClass().getSimpleName() + ": Access Denied ‚ùå");
        }
    }
}

üßæ Output:
Admin: Access Granted ‚úÖ
Guest: Access Denied ‚ùå
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
‚úÖ Moderate Example: Serializable Interface
Serializable is a built-in marker interface in Java that tells the JVM that the object can be converted to a byte stream (i.e., saved to a file or sent over a network).

import java.io.*;

class Student implements Serializable {
    int id;
    String name;

    Student(int id, String name) {
        this.id = id;
        this.name = name;
    }
}

public class SerializeTest {
    public static void main(String[] args) throws Exception {
        Student s1 = new Student(101, "John");

        // Serialize object to file
        FileOutputStream fos = new FileOutputStream("student.txt");
        ObjectOutputStream oos = new ObjectOutputStream(fos);
        oos.writeObject(s1);
        oos.close();
        fos.close();

        System.out.println("Object Serialized Successfully!");
    }
}

‚úÖ Here, Student implements Serializable. If it didn‚Äôt, the JVM would throw a NotSerializableException.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
