Q. Find the longest string in a list of strings using Java streams:
    List<String> strings = Arrays.asList("apple", "banana", "cherry", "date", "grapefruit");
    Optional<String> longestString = strings
              .stream()
              .max(Comparator.comparingInt(String::length));
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Calculate the average age of a list of Person objects using Java streams:
List<Person> persons = Arrays.asList(
    new Person("Alice", 25),
    new Person("Bob", 30),
    new Person("Charlie", 35)
);
double averageAge = persons.stream()
                          .mapToInt(Person::getAge)
                          .average()
                          .orElse(0);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Check if a list of integers contains a prime number using Java streams:
public boolean isPrime(int number) {
  if (number <= 1) {
    return false;
  }
  for (int i = 2; i <= Math.sqrt(number); i++) {
    if (number % i == 0) {
        return false;
    }
  }
  return true;
}
 
private void printPrime() {
  List<Integer> numbers = Arrays.asList(2, 4, 6, 8, 10, 11, 12, 13, 14, 15);
  boolean containsPrime = numbers.stream()
                                 .anyMatch(this::isPrime);
  System.out.println("List contains a prime number: " + containsPrime);

 }
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Merge two sorted lists into a single sorted list using Java streams:
List<Integer> list1 = Arrays.asList(1, 3, 5, 7, 9);
List<Integer> list2 = Arrays.asList(2, 4, 6, 8, 10);
List<Integer> mergedList = Stream.concat(list1.stream(), list2.stream())
                                .sorted()
                                .collect(Collectors.toList());
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Find the intersection of two lists using Java streams:
List<Integer> list1 = Arrays.asList(1, 2, 3, 4, 5);
List<Integer> list2 = Arrays.asList(3, 4, 5, 6, 7);
List<Integer> intersection = list1.stream()
                                  .filter(list2::contains)
                                  .collect(Collectors.toList());
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Remove duplicates from a list while preserving the order using Java streams:
List<Integer> numbersWithDuplicates = Arrays.asList(1, 2, 3, 2, 4, 1, 5, 6, 5);
List<Integer> uniqueNumbers = numbersWithDuplicates
                                       .stream()
                                       .distinct()
                                       .collect(Collectors.toList());
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Given a list of transactions, find the sum of transaction amounts for each day using Java streams:
List<Transaction> transactions = Arrays.asList(
    new Transaction("2022-01-01", 100),
    new Transaction("2022-01-01", 200),
    new Transaction("2022-01-02", 300),
    new Transaction("2022-01-02", 400),
    new Transaction("2022-01-03", 500)
);

Map<String, Integer> sumByDay = transactions
                        .stream()
                        .collect(Collectors.groupingBy(Transaction::getDate,
                               Collectors.summingInt(Transaction::getAmount)));
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q. Given a list of strings, find the frequency of each word using Java streams:
List<String> words = Arrays.asList("apple", "banana", "apple", "cherry", 
                                    "banana", "apple");
Map<String, Long> wordFrequency = words
              .stream()
              .collect(Collectors
                    .groupingBy(Function.identity(), Collectors.counting())
                );
======================================================================================================================================================================================================================
