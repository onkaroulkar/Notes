‚úÖ PART 1: What Is an Entity Relationship (ER) Model?

The ER model is a way to design a database at a high level by:

Identifying entities (e.g., Customer, Product)
Defining attributes (e.g., Name, Email)
Describing relationships (e.g., Customer buys Product)
It‚Äôs usually visualized with an ER diagram, and then implemented using SQL.

1. Entity
An entity is a thing or object in the real world that is distinguishable from other objects.

Types:
Strong Entity: Can exist independently.

Weak Entity: Depends on another entity (no primary key on its own).
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. Attributes

Properties of an entity.
Types:
Simple (Atomic): Cannot be divided (e.g., Age, Name)
Composite: Made up of multiple parts (e.g., Address = Street, City)
Derived: Can be calculated (e.g., Age from DOB)
Multivalued: Can have multiple values (e.g., Phone Numbers)

‚úÖ Example:
Student
 - StudentID (simple)
 - Name (composite ‚Üí FirstName, LastName)
 - Age (derived from DOB)
 - PhoneNumbers (multivalued)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
‚úÖ PART 2: Basic Concepts

| Concept      | Description                             | Example                    |
| ------------ | --------------------------------------- | -------------------------- |
| Entity       | A real-world object                     | `Student`, `Course`        |
| Attribute    | Property of an entity                   | `Name`, `Age`, `CourseID`  |
| Relationship | Association between entities            | `Enrolls`                  |
| Primary Key  | Uniquely identifies each record         | `StudentID`                |
| Foreign Key  | Links to a primary key in another table | `CourseID` in `Enrollment` |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
üü¶ WEAK ENTITIES & IDENTIFYING RELATIONSHIPS

A weak entity cannot be uniquely identified without a related strong entity. It uses a foreign key from the strong entity.

‚úÖ Example:

Invoice ‚Üí Strong
PaymentInstallment ‚Üí Weak
Relationship: Invoice has PaymentInstallment
Identifying attribute: PaymentNo (along with InvoiceID)

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
üü™ GENERALIZATION, SPECIALIZATION, AND INHERITANCE

1. Generalization
Combining two or more entities into a general (super) entity.
‚úÖ Example:
Doctor and Nurse ‚áí generalized as MedicalStaff

2. Specialization
Breaking an entity into more specific sub-entities.
‚úÖ Example:
Employee ‚áí Specialized into Engineer, Manager

3. Inheritance
Sub-entities inherit attributes of the super-entity.
‚úÖ Example:
Employee has Name, ID
Manager (inherits Name, ID + adds Department)
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
üü• AGGREGATION (RELATIONSHIP BETWEEN RELATIONSHIPS)

Used when a relationship needs to be treated as an entity.
‚úÖ Example:
Employee works on Project
Each work is supervised by a Manager
So, "works_on" is aggregated as an entity, related to Manager.

Employee --- works_on --- Project
                 |
                 |
              Supervisor (Manager)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
üüß OPTIONALITY & PARTICIPATION CONSTRAINTS

Total vs Partial Participation
Total: Every entity in A must participate in a relationship (denoted by double lines).
Partial: Some entities in A may participate (single line).

‚úÖ Example:
Every Student must enroll in at least one Course ‚Üí Total Participation
Not all Professors teach courses ‚Üí Partial Participation
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
‚úÖ SQL Table Relationships Overview
There are four main types of relationships between tables in SQL:

| Relationship Type | Description                                          | Example                            |
| ----------------- | ---------------------------------------------------- | ---------------------------------- |
| One-to-One        | One row in Table A ‚Üî one row in Table B              | Person ‚Üî Passport                  |
| One-to-Many       | One row in Table A ‚Üî many rows in Table B            | Department ‚Üí Employees             |
| Many-to-One       | Many rows in Table A ‚Üî one row in Table B            | Employees ‚Üí Department             |
| Many-to-Many      | Many rows in A ‚Üî many rows in B (via junction table) | Students ‚Üî Courses                 |
| Self-Referencing  | A table references itself                            | Employees (who report to managers) |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
1Ô∏è‚É£ One-to-One Relationship
Example: Each Person has one Passport

Tables and SQL:
CREATE TABLE Person (
    PersonID INT PRIMARY KEY,
    Name VARCHAR(100)
);

CREATE TABLE Passport (
    PassportID INT PRIMARY KEY,
    PersonID INT UNIQUE,
    PassportNumber VARCHAR(50),
    FOREIGN KEY (PersonID) REFERENCES Person(PersonID)
);

üìå UNIQUE ensures one-to-one: one passport per person.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
2Ô∏è‚É£ One-to-Many Relationship
Example: A Department has many Employees

Tables and SQL:
CREATE TABLE Department (
    DeptID INT PRIMARY KEY,
    DeptName VARCHAR(100)
);

CREATE TABLE Employee (
    EmpID INT PRIMARY KEY,
    Name VARCHAR(100),
    DeptID INT,
    FOREIGN KEY (DeptID) REFERENCES Department(DeptID)
);

üìå Each employee belongs to one department, but a department has many employees.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
3Ô∏è‚É£ Many-to-One Relationship

This is just One-to-Many in reverse.
Example: Many Employees work in one Company

Tables and SQL:
CREATE TABLE Company (
    CompanyID INT PRIMARY KEY,
    Name VARCHAR(100)
);

CREATE TABLE Employee (
    EmpID INT PRIMARY KEY,
    Name VARCHAR(100),
    CompanyID INT,
    FOREIGN KEY (CompanyID) REFERENCES Company(CompanyID)
);

üìå Same structure as one-to-many; perspective differs.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
3Ô∏è‚É£ Many-to-Many Relationship

A student can enroll in many courses.
A course can have many students.

Tables and SQL:
-- Students Table
CREATE TABLE Students (
    student_id INT PRIMARY KEY,
    name VARCHAR(100)
);

-- Courses Table
CREATE TABLE Courses (
    course_id INT PRIMARY KEY,
    title VARCHAR(100)
);

-- Enrollments Table (Join Table)
CREATE TABLE Enrollments (
    student_id INT,
    course_id INT,
    PRIMARY KEY (student_id, course_id),
    FOREIGN KEY (student_id) REFERENCES Students(student_id),
    FOREIGN KEY (course_id) REFERENCES Courses(course_id)
);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Note: Study the ER diagram design problem.


