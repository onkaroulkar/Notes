🔰 What is ORM?

ORM (Object-Relational Mapping) is a technique that maps objects in code to rows in a relational database.
Java class ⟶ Table
Java field ⟶ Column
Java object ⟶ Row in the table
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔧 Tools in Java for ORM
The most popular Java ORM framework is Hibernate. Other examples include:

JPA (Java Persistence API – specification)

EclipseLink

MyBatis (semi-ORM)
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
✅ Step 1: Simple Example – One Entity, One Table

🎯 Table in Database:
CREATE TABLE users (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100)
);

🧑 Java Class with ORM Mapping (JPA + Hibernate):
import jakarta.persistence.*;

@Entity
@Table(name = "users")
public class User {

    @Id
    private int id;

    private String name;

    private String email;

    // Constructors, Getters, Setters
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
User user = new User();
user.setId(1);
user.setName("Alice");
user.setEmail("alice@example.com");

// Hibernate will map this object to an INSERT query
session.save(user);

➡️ The object gets inserted as a row into the users table.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
✅ Step 2: Adding Relationships (One-to-Many)

Now let's say one User has many Orders.
🎯 Tables:
CREATE TABLE orders (
    id INT PRIMARY KEY,
    item_name VARCHAR(100),
    user_id INT,
    FOREIGN KEY (user_id) REFERENCES users(id)
);

🧑 Java Entity – Order:
@Entity
@Table(name = "orders")
public class Order {

    @Id
    private int id;

    private String itemName;

    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    // Getters and setters
}


🧑 Java Entity – updated User:
@Entity
@Table(name = "users")
public class User {

    @Id
    private int id;

    private String name;

    private String email;

    @OneToMany(mappedBy = "user")
    private List<Order> orders;

    // Getters and setters
}

➡️ Hibernate now handles foreign key relationships automatically.
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
✅ Step 3: Many-to-Many Relationships
Let’s say a Student can enroll in many Courses, and a Course can have many Students.

🎯 Tables:
CREATE TABLE students (
    id INT PRIMARY KEY,
    name VARCHAR(100)
);

CREATE TABLE courses (
    id INT PRIMARY KEY,
    title VARCHAR(100)
);

CREATE TABLE student_course (
    student_id INT,
    course_id INT,
    PRIMARY KEY (student_id, course_id),
    FOREIGN KEY (student_id) REFERENCES students(id),
    FOREIGN KEY (course_id) REFERENCES courses(id)
);


🧑 Java Entity – Student:
@Entity
@Table(name = "students")
public class Student {

    @Id
    private int id;

    private String name;

    @ManyToMany
    @JoinTable(
        name = "student_course",
        joinColumns = @JoinColumn(name = "student_id"),
        inverseJoinColumns = @JoinColumn(name = "course_id")
    )
    private List<Course> courses;

    // Getters and setters
}


🧑 Java Entity – Course:
@Entity
@Table(name = "courses")
public class Course {

    @Id
    private int id;

    private String title;

    @ManyToMany(mappedBy = "courses")
    private List<Student> students;

    // Getters and setters
}
➡️ Hibernate will manage the join table student_course automatically.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
✅ ORM Summary Table

| Java Concept          | Database Concept       |
| --------------                 | -------------------                |
| `@Entity`                | Table                                  |
| Class field             | Column                              |
| `@Id`                           | Primary key                   |
| `@OneToMany`        | Foreign key                   |
| `@ManyToMany`     | Join table                      |
| `@Inheritance`  | Table per hierarchy |

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
****** Simple Project Using Hibernate**************
🧱 Project Structure

hibernate-jpa-demo/
├── src/
│   └── main/
│       ├── java/
│       │   └── com/example/
│       │       ├── model/
│       │       │   └── User.java
│       │       └── App.java
│       └── resources/
│           └── hibernate.cfg.xml
├── pom.xml
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
📦 1. pom.xml (Maven Dependencies)

<project xmlns="http://maven.apache.org/POM/4.0.0" ...>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>hibernate-jpa-demo</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- Hibernate -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>6.4.4.Final</version>
        </dependency>

        <!-- JPA API -->
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
            <version>3.1.0</version>
        </dependency>

        <!-- H2 Database (in-memory for testing) -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>2.2.224</version>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>2.0.13</version>
        </dependency>
    </dependencies>
</project>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
⚙️ 2. hibernate.cfg.xml (Configuration File)
Location: src/main/resources/hibernate.cfg.xml

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
        "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://hibernate.sourceforge.net/hibernate-configuration-3.0.dtd">

<hibernate-configuration>
    <session-factory>
        <!-- JDBC config -->
        <property name="hibernate.connection.driver_class">org.h2.Driver</property>
        <property name="hibernate.connection.url">jdbc:h2:mem:testdb</property>
        <property name="hibernate.connection.username">sa</property>
        <property name="hibernate.connection.password"></property>

        <!-- Hibernate config -->
        <property name="hibernate.dialect">org.hibernate.dialect.H2Dialect</property>
        <property name="hibernate.hbm2ddl.auto">update</property>
        <property name="show_sql">true</property>

        <!-- Mapping classes -->
        <mapping class="com.example.model.User"/>
    </session-factory>
</hibernate-configuration>
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
👤 3. User.java (Entity Class)
Location: src/main/java/com/example/model/User.java

package com.example.model;

import jakarta.persistence.*;

@Entity
@Table(name = "users")
public class User {

    @Id
    private int id;

    private String name;

    private String email;

    public User() {}

    public User(int id, String name, String email) {
        this.id = id;
        this.name = name;
        this.email = email;
    }

    // Getters and setters

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🚀 4. App.java (Main Class)
Location: src/main/java/com/example/App.java

package com.example;

import com.example.model.User;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

public class App {
    public static void main(String[] args) {
        // Build SessionFactory from configuration
        SessionFactory factory = new Configuration()
                .configure("hibernate.cfg.xml")
                .addAnnotatedClass(User.class)
                .buildSessionFactory();

        // Create a new session
        Session session = factory.getCurrentSession();

        try {
            // Create a User
            User user = new User(1, "Alice", "alice@example.com");

            // Start transaction
            session.beginTransaction();

            // Save the user object
            session.save(user);

            // Commit transaction
            session.getTransaction().commit();

            System.out.println("User saved successfully!");
        } finally {
            factory.close();
        }
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------







