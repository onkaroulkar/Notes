1. What is the Java Collection Framework?
Answer:
The Java Collection Framework (JCF) is a set of interfaces, classes, and algorithms that provide data structures to store and manipulate groups of objects. It includes implementations of lists, sets, maps, and queues, allowing developers to manage collections efficiently.

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. What are the main interfaces of the Collection Framework?
Answer:

Collection (root interface for most collections)

List (ordered, allows duplicates)

Set (no duplicates)

Queue (FIFO data structure)

Deque (double-ended queue)

Map (key-value pairs, not part of Collection interface)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. What is the difference between Collection and Collections?
Answer:

Collection is an interface representing a group of objects.

Collections is a utility class with static methods to operate on collections, e.g., sorting, searching, synchronization.

List<Integer> list = new ArrayList<>();
Collections.sort(list);

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. What is the difference between ArrayList and LinkedList?
| Feature         | ArrayList              | LinkedList                     |
| --------------- | ---------------------- | ------------------------------ |
| Data structure  | Resizable array        | Doubly linked list             |
| Access time     | O(1) random access     | O(n) sequential access         |
| Insert/delete   | O(n) (due to shifting) | O(1) (at ends), O(n) in middle |
| Memory overhead | Less                   | More (stores pointers)         |
| Better for      | Frequent reads         | Frequent inserts/deletes       |
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. How does HashMap work internally?

Answer:

HashMap stores data as key-value pairs.

Internally uses an array of buckets.

Each bucket is a linked list or balanced tree (since Java 8).

Hashcode of the key determines the bucket index.

Collisions (two keys mapping to the same bucket) are handled by chaining (linked list/tree).

When the number of elements exceeds the load factor (default 0.75), the map resizes (rehashing).

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------6. How do you remove duplicates from a List?
Answer:
Use a Set because it does not allow duplicates:

List<String> list = Arrays.asList("apple", "banana", "apple", "orange");
Set<String> set = new HashSet<>(list);
List<String> uniqueList = new ArrayList<>(set);

Or maintain insertion order with LinkedHashSet:

Set<String> set = new LinkedHashSet<>(list);
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
7. How do you iterate over a Map?

Answer:
Using entrySet():

Map<Integer, String> map = new HashMap<>();
map.put(1, "Java");
map.put(2, "Python");

for (Map.Entry<Integer, String> entry : map.entrySet()) {
    System.out.println("Key: " + entry.getKey() + ", Value: " + entry.getValue());
}

Or using Java 8 forEach:
map.forEach((key, value) -> System.out.println(key + " = " + value));

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
8. How can you safely modify a collection while iterating?

Answer:
Use the Iterator’s remove() method:

Iterator<String> it = list.iterator();
while (it.hasNext()) {
    String item = it.next();
    if (item.equals("removeMe")) {
        it.remove();
    }
}

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
9. What is fail-fast and fail-safe iterator?

Answer:

Fail-fast iterator: Throws ConcurrentModificationException if the collection is modified during iteration (e.g., ArrayList, HashMap).

Fail-safe iterator: Iterates over a copy of the collection, so changes during iteration don’t throw exceptions (e.g., CopyOnWriteArrayList).
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
10. How do you sort a collection of custom objects?
Answer:
Implement Comparable in your class or use Comparator.

Example with Comparable:
class Person implements Comparable<Person> {
    String name;
    int age;

    @Override
    public int compareTo(Person other) {
        return Integer.compare(this.age, other.age);
    }
}

List<Person> people = new ArrayList<>();
// add people
Collections.sort(people); // sorts by age


Example with Comparator:
Collections.sort(people, Comparator.comparing(Person::getName));

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔷 11. How does HashMap work internally?

Answer:

HashMap uses an array of buckets, where each bucket is a linked list or a red-black tree (Java 8+).

Each key-value pair is stored as a Node with key, value, hash, and next.

It uses hashCode() of the key to calculate the index.

On collisions (same index), it adds nodes to a chain (linked list or tree).

If chain size > 8 and capacity > 64, the bucket converts to a tree for better performance.

Resize happens when size exceeds capacity * load factor (default load factor = 0.75).

int hash = key.hashCode();
int index = (n - 1) & hash;

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔷 12. How does HashSet work internally?

Answer:

HashSet is backed by a HashMap.

When you add an element to a HashSet, it actually calls put(key, PRESENT) on the internal HashMap.

The value PRESENT is a dummy object.

private transient HashMap<E,Object> map;
private static final Object PRESENT = new Object();

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔷 13. How do you handle collisions in HashMap?

Answer:

Collisions happen when multiple keys have the same hash index.

Java handles them via chaining:

Before Java 8: linked list

From Java 8: linked list → red-black tree (if more than 8 entries in one bucket)

So, even if two keys hash to the same index, they are stored and accessed correctly via .equals().

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔷 14. What is the load factor in HashMap and how does it affect performance?

Answer:

Load factor = how full the HashMap can get before it resizes.

Default = 0.75. It balances time and space.

Formula to resize:
If (number of entries) ≥ capacity × loadFactor, resize occurs.

initialCapacity = 16; // default
loadFactor = 0.75;
threshold = 16 * 0.75 = 12

If more than 12 elements, it resizes (doubles capacity).
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔷 15. What are the differences between synchronized and concurrent collections?

| Feature       | Synchronized Collections    | Concurrent Collections                      |
| ------------- | --------------------------- | ------------------------------------------- |
| Performance   | Slower (locks whole object) | Faster (locks only segments or uses CAS)    |
| Examples      | `Vector`, `Hashtable`       | `ConcurrentHashMap`, `CopyOnWriteArrayList` |
| Thread safety | Yes                         | Yes                                         |
| Use case      | Legacy systems              | Modern multi-threaded apps                  |

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 🔷 16. How can you make a collection thread-safe?

Answer:

Using synchronized wrapper:
List<String> syncList = Collections.synchronizedList(new ArrayList<>());

Using concurrent collections:
Map<String, String> map = new ConcurrentHashMap<>();

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔷 18. How does LinkedHashMap maintain insertion order?
Answer:

It extends HashMap and maintains a doubly-linked list running through all of its entries.

This maintains insertion order or access order (if enabled).

LinkedHashMap<Integer, String> map = new LinkedHashMap<>();
map.put(1, "A");
map.put(2, "B");
// Maintains order: 1 -> 2
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔷 19. Explain the underlying data structure of TreeMap and TreeSet.
Answer:

Both use Red-Black Trees, which are self-balancing binary search trees.

Time complexity: O(log n) for operations (add, remove, search).

TreeSet = TreeMap internally (stores elements as keys with dummy values).

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔷 20. What are some differences between Vector and ArrayList?

| Feature     | Vector               | ArrayList          |
| ----------- | -------------------- | ------------------ |
| Thread-safe | ✅ Yes (synchronized) | ❌ No               |
| Performance | Slower (due to sync) | Faster             |
| Growth rate | Doubles size (x2)    | Increases by 50%   |
| Legacy      | ✅ Yes                | ❌ No (part of JCF) |
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔷 21. What is the difference between ConcurrentHashMap and Hashtable?
| Feature            | `ConcurrentHashMap`                    | `Hashtable`                           |
| ------------------ | -------------------------------------- | ------------------------------------- |
| Synchronization    | Fine-grained (bucket-level or segment) | Entire map is locked (coarse-grained) |
| Performance        | High                                   | Lower due to full locking             |
| Null keys/values   | No null keys or values allowed         | No null keys, but allows null values  |
| Fail-safe iterator | ✅ Yes (weakly consistent)              | ❌ No (fail-fast)                      |

Key Point:
ConcurrentHashMap is preferred in multithreaded applications for better performance and scalability.
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔷 22. How does CopyOnWriteArrayList work? When would you use it?
Answer:

It creates a new copy of the array every time a modification (add, set, remove) occurs.

Safe for iteration without ConcurrentModificationException.

Use case: When reads are frequent and writes are rare (e.g., caching, event listeners).

List<String> list = new CopyOnWriteArrayList<>();
list.add("Java");
for (String s : list) {
    list.remove(s); // No ConcurrentModificationException
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

🔷 23. What are BlockingQueues? Give examples.
Answer:
BlockingQueue: A queue that blocks when trying to add to a full queue or take from an empty queue.

Common in producer-consumer scenarios.

Types:
ArrayBlockingQueue
LinkedBlockingQueue
PriorityBlockingQueue
DelayQueue

BlockingQueue<String> queue = new ArrayBlockingQueue<>(2);
queue.put("A"); // blocks if full
queue.take();   // blocks if empty

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔷 24. Explain how a PriorityQueue works internally.

Answer:

Based on a binary heap.
Elements are ordered by natural ordering or a provided Comparator.
It does not guarantee FIFO.
Smallest (or highest-priority) element is at the head.

PriorityQueue<Integer> pq = new PriorityQueue<>();
pq.add(30);
pq.add(10);
pq.add(20);
System.out.println(pq.poll()); // prints 10

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔷 26. Explain the differences between deep copy and shallow copy in collections.

A shallow copy creates a new collection object, but does not create copies of the objects inside the collection.

Instead, it copies references to the original objects.

So, the top-level container is new, but the elements inside still point to the same objects as the original.

Deep Copy
A deep copy creates a new collection, and recursively copies all objects inside it.

So, the copied collection and all nested objects are completely independent of the original.

Changes to the deep copy do not affect the original, and vice versa.

List<List<String>> shallow = new ArrayList<>(original);
List<List<String>> deep = original.stream()
                                  .map(ArrayList::new)
                                  .collect(Collectors.toList());
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

28. What is the difference between Collection and Stream?

| Feature     | Collection         | Stream                                |
| ----------- | ------------------ | ------------------------------------- |
| Stored data | Stores actual data | Virtual view of data                  |
| Reusability | Can be reused      | Streams are consumable (one-time use) |
| Operations  | Eager (immediate)  | Lazy (executed only on terminal ops)  |
| Modifiable  | Yes                | No (streams don't modify source)      |

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
🔷 30. Explain the time complexity of operations in common collections.

| Operation | ArrayList | LinkedList | HashSet | TreeSet  | HashMap | TreeMap  |
| --------- | --------- | ---------- | ------- | -------- | ------- | -------- |
| Access    | O(1)      | O(n)       | -       | -        | O(1)    | O(log n) |
| Insert    | O(1)\*    | O(1)       | O(1)    | O(log n) | O(1)    | O(log n) |
| Delete    | O(n)      | O(1)       | O(1)    | O(log n) | O(1)    | O(log n) |
| Search    | O(n)      | O(n)       | O(1)    | O(log n) | O(1)    | O(log n) |

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Practical / Scenario-Based Questions
How would you remove duplicates from a List?

How do you iterate over a Map?

How do you safely modify a collection while iterating over it?

How can you synchronize access to a non-thread-safe collection?

How do you convert an array to a list and vice versa?

Explain the difference between Collections.unmodifiableList() and List.copyOf() (Java 10+).

How do you merge two Maps in Java?

What will happen if you use mutable objects as keys in a HashMap?

Explain the difference between remove() and removeIf() in Collections.

How can you implement a LRU cache using LinkedHashMap?

Write a method to reverse a LinkedList using Collections or manually.

Implement a method to find the frequency of each element in a list.

Write code to sort a Map by its values.

Write code to find the intersection of two Lists.

Implement a function to check if two lists are equal regardless of order.


what is load factor?
load factor  = No of elements/No of buckets







