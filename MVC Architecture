ðŸ”¶ What is MVC?

| Component      | Responsibility                                              |
| -------------- | ----------------------------------------------------------- |
| **Model**      | Holds the data and business logic.                          |
| **View**       | Displays the data (UI).                                     |
| **Controller** | Handles user input and communicates between View and Model. |

This separation helps with maintainability, testability, and scalability.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
ðŸ”¹ Basic Example: A Simple Console-based MVC App
Let's simulate a Student Information App.

1. Model (Student.java)

public class Student {
    private String name;
    private String rollNo;

    public Student(String name, String rollNo) {
        this.name = name;
        this.rollNo = rollNo;
    }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getRollNo() { return rollNo; }
    public void setRollNo(String rollNo) { this.rollNo = rollNo; }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
2. View (StudentView.java)

public class StudentView {
    public void printStudentDetails(String studentName, String studentRollNo) {
        System.out.println("Student:");
        System.out.println("Name: " + studentName);
        System.out.println("Roll No: " + studentRollNo);
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Controller (StudentController.java)

public class StudentController {
    private Student model;
    private StudentView view;

    public StudentController(Student model, StudentView view) {
        this.model = model;
        this.view = view;
    }

    public void setStudentName(String name) {
        model.setName(name);
    }

    public void setStudentRollNo(String rollNo) {
        model.setRollNo(rollNo);
    }

    public void updateView() {
        view.printStudentDetails(model.getName(), model.getRollNo());
    }
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
4. Main Application (MVCPatternDemo.java)

public class MVCPatternDemo {
    public static void main(String[] args) {
        Student model = new Student("John", "123");
        StudentView view = new StudentView();
        StudentController controller = new StudentController(model, view);

        controller.updateView(); // Initial display

        // Update model via controller
        controller.setStudentName("Mike");
        controller.updateView(); // Updated display
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

ðŸ§© Benefits of MVC
Loose coupling between components.
Unit test components independently.
Change UI (View) without touching business logic (Model).
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
